=============================================================================
List of generated methods in project: Proyecto

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "TmDt_H1"   (component TimeDate)
   - TmDt_H1_SetTime -This method sets a new actual time.
   - TmDt_H1_GetTime -This method returns current time.

Module "TU_H1"     (component TimerUnit_LDD)
   - TU_H1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU_H1_Enable -Enables the component - it starts the signal generation. Events may be generated (see SetEventMask). The 
                method is not available if the counter can't be disabled/enabled by HW.
   - TU_H1_Disable -Disables the component - it stops signal generation and events calling. The method is not available if the 
                counter can't be disabled/enabled by HW.

Module "UTIL_H1"   (component Utility)
   - UTIL_H1_strcpy -Same as normal strcpy, but safe as it does not write beyond the buffer.
   - UTIL_H1_strcat -Same as normal strcat, but safe as it does not write beyond the buffer.
   - UTIL_H1_strcatPad -Same as normal strcat, but safe as it does not write beyond the buffer. The buffer will be filled with 
                a pad character for a given length.
   - UTIL_H1_chcat -Adds a single character to a zero byte terminated string buffer. It cares about buffer overflow.
   - UTIL_H1_Num8sToStr -Converts a signed 8bit value into a string.
   - UTIL_H1_Num8uToStr -Converts an unsigned 8bit value into a string.
   - UTIL_H1_Num16sToStr -Converts a signed 16bit value into a string.
   - UTIL_H1_Num16uToStr -Converts a signed 16bit value into a string.
   - UTIL_H1_Num32uToStr -Converts an unsigned 32bit value into a string.
   - UTIL_H1_Num32sToStr -Converts a signed 32bit value into a string.
   - UTIL_H1_NumFloatToStr -Converts a float value into a string.
   - UTIL_H1_Num16sToStrFormatted -Converts a 16bit signed value to string.
   - UTIL_H1_Num16uToStrFormatted -Converts a 16bit unsigned value to string.
   - UTIL_H1_Num32uToStrFormatted -Converts a 32bit unsigned value to string.
   - UTIL_H1_Num32sToStrFormatted -Converts a 32bit signed value to string.
   - UTIL_H1_strcatNum8u -Appends a 8bit unsigned value to a string buffer.
   - UTIL_H1_strcatNum8s -Appends a 8bit signed value to a string buffer.
   - UTIL_H1_strcatNum16u -Appends a 16bit unsigned value to a string buffer.
   - UTIL_H1_strcatNum16s -Appends a 16bit signed value to a string buffer.
   - UTIL_H1_strcatNum32u -Appends a 32bit signed value to a string buffer.
   - UTIL_H1_strcatNum32s -Appends a 32bit signed value to a string buffer.
   - UTIL_H1_strcatNum16uFormatted -Appends a 16bit unsigned value to a string buffer in a formatted way.
   - UTIL_H1_strcatNum16sFormatted -Appends a 16bit signed value to a string buffer in a formatted way.
   - UTIL_H1_strcatNum32uFormatted -Appends a 32bit unsigned value to a string buffer in a formatted way.
   - UTIL_H1_strcatNum32sFormatted -Appends a 32bit signed value to a string buffer in a formatted way.
   - UTIL_H1_strcatNum8Hex -Appends a 8bit unsigned value to a string buffer as hex number (without a 0x prefix).
   - UTIL_H1_strcatNum16Hex -Appends a 16bit unsigned value to a string buffer as hex number (without a 0x prefix).
   - UTIL_H1_strcatNum24Hex -Appends a 32bit unsigned value to a string buffer as hex number (without a 0x prefix). Only 24bits 
                are used.
   - UTIL_H1_strcatNum32Hex -Appends a 16bit unsigned value to a string buffer as hex number (without a 0x prefix).
   - UTIL_H1_strcatNum32sDotValue100 -Appends a 32bit signed value to a string buffer. The value is in 1/100 units.  For 
                example for the value -13456 it will append the string "-134.56"
   - UTIL_H1_strcatNumFloat -Converts a float value into a string.
   - UTIL_H1_IsLeapYear -Returns true if a given year is a leap year
   - UTIL_H1_WeekDay -Returns the weekday for a given date >= 1.Jan.1900
   - UTIL_H1_ReadEscapedName -Scans an escaped name from a string. This is useful e.g. for double quoted file names.
   - UTIL_H1_xatoi -Custom atoi() (ascii to int) implementation by Elm Chan
   - UTIL_H1_ScanDate -Scans a date in the format "dd.mm.yyyy" or "dd-mm-yyyy". For yy it will expand it to 20yy.
   - UTIL_H1_ScanTime -Scans a time string in the format "hh:mm:ss,hh" with the part for the ",hh" is optional.
   - UTIL_H1_ScanDecimal8uNumber -Scans a decimal 8bit unsigned number
   - UTIL_H1_ScanDecimal8sNumber -Scans a decimal 8bit signed number
   - UTIL_H1_ScanDecimal16uNumber -Scans a decimal 16bit unsigned number
   - UTIL_H1_ScanDecimal16sNumber -Scans a decimal 16bit signed number
   - UTIL_H1_ScanDecimal32uNumber -Scans a decimal 32bit unsigned number
   - UTIL_H1_ScanDecimal32sNumber -Scans a decimal 32bit signed number
   - UTIL_H1_ScanDecimal32sDotNumber -Scans a decimal 32bit signed number with a following dot (fractional part), e.g. "-34587.
                0248", it will return the (signed) integral and fractional part with number of fractional zeros. The function 
                accepts as well numbers  like "17" (no fractional part" or "17.0"
   - UTIL_H1_ScanHex8uNumber -Scans a hexadecimal 8bit number, starting with 0x
   - UTIL_H1_ScanHex8uNumberNoPrefix -Scans a hexadecimal 8bit number, without 0x
   - UTIL_H1_ScanHex16uNumber -Scans a hexadecimal 16bit number, starting with 0x
   - UTIL_H1_ScanHex32uNumber -Scans a hexadecimal 32bit number, starting with 0x
   - UTIL_H1_ScanSeparatedNumbers -Scans multiple numbers separated by character, e.g. "123.68.5.3"
   - UTIL_H1_ScanDoubleQuotedString -Scans a string inside double quotes and returns it without the double quotes.
   - UTIL_H1_strcmp -Wrapper to the standard strcmp() routine
   - UTIL_H1_strncmp -Wrapper to the standard strncmp() routine
   - UTIL_H1_strFind -Searches a substring inside a string and returns the position.
   - UTIL_H1_strtailcmp -Compares the tail of a string and returns 0 if it matches, 1 otherwise
   - UTIL_H1_strlen -Wrapper to the standard strlen() function.
   - UTIL_H1_strCutTail -Removes a tailing substring from a string. The string passed will be modified (the tail is cut by 
                writing a zero byte to the string!)
   - UTIL_H1_GetValue16LE -Returns a 16bit Little Endian value from memory
   - UTIL_H1_GetValue24LE -Returns a 24bit Little Endian value from memory
   - UTIL_H1_GetValue32LE -Returns a 32bit Little Endian value from memory
   - UTIL_H1_SetValue16LE -Stores a 16bit value in memory as Little Endian
   - UTIL_H1_SetValue24LE -Stores a 24bit value in memory as Little Endian
   - UTIL_H1_SetValue32LE -Stores a 32bit value in memory as Little Endian
   - UTIL_H1_map -Maps a value from one range to another
   - UTIL_H1_map64 -Maps a value from one range to another, using 64bit math
   - UTIL_H1_constrain -Makes sure that a given input value is inside a given range.
   - UTIL_H1_random -Provides a random value. You have to call intialize the random number generator with randomSetSeed() first!
   - UTIL_H1_randomSetSeed -Sets a seed for the random number generator
   - UTIL_H1_Deinit -Driver De-Initialization
   - UTIL_H1_Init -Driver Initialization

Module "MCUC_H1"   (component McuLibConfig)
   - MCUC_H1_Init -Driver initialization method
   - MCUC_H1_Deinit -Driver deinitialization method

Module "AD_H1"     (component ADC)
   - AD_H1_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note: If the 
                <number of conversions> is more than one the conversion of A/D channels is performed specified number of times.)
   - AD_H1_MeasureChan -This method performs measurement on one channel. (Note: If the <number of conversions> is more than one 
                the conversion of the A/D channel is performed specified number of times.)
   - AD_H1_GetValue16 -This method returns the last measured values of all channels. Compared with <GetValue> method this 
                method returns more accurate result if the <number of conversions> is greater than 1 and <AD resolution> is 
                less than 16 bits. In addition, the user code dependency on <AD resolution> is eliminated.
   - AD_H1_Calibrate -This method starts self calibration process. Calibration is typically used to remove the effects of the 
                gain and offset from a specific reading.

Module "TI_H1"     (component TimerInt)

Module "TU_H2"     (component TimerUnit_LDD)
   - TU_H2_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.

Module "EInt_H1"   (component ExtInt)
   - EInt_H1_GetVal -Returns the actual value of the input pin of the component.

Module "FC16_H1"   (component FreeCntr16)
   - FC16_H1_Reset -This method clears the counter.
   - FC16_H1_GetTimeUS -This method returns the time (as a 16-bit unsigned integer) in microseconds since the last resetting 
                after the last reset.
   - FC16_H1_GetTimeMS -This method returns the time (as a 16-bit unsigned integer) in milliseconds since the last resetting 
                after the last reset.

Module "TU_H3"     (component TimerUnit_LDD)
   - TU_H3_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU_H3_ResetCounter -Resets counter. If counter is counting up then it is set to zero. If counter is counting down then 
                counter is updated to the reload value.   The method is not available if HW doesn't allow resetting of the 
                counter.

Module "AS_H1"     (component AsynchroSerial)
   - AS_H1_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does 
                not wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the 
                preferred method to handle error and break exception in the interrupt mode is to use events <OnError> and 
                <OnBreak> the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the 
                information about an exception in interrupt mode is returned only if there is a valid character ready to be 
                read.
   - AS_H1_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - AS_H1_RecvBlock -If any data is received, this method returns the block of the data and its length (and incidental error), 
                otherwise it returns an error code (it does not wait for data).  This method is available only if non-zero 
                length of the input buffer is defined and the receiver property is enabled.  If less than requested number of 
                characters is received only the available data is copied from the receive buffer to the user specified 
                destination. The value ERR_EXEMPTY is returned and the value of variable pointed by the Rcv parameter is set to 
                the number of received characters.
   - AS_H1_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length of the 
                output buffer is defined and the transmitter property is enabled.
   - AS_H1_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer is 
                defined and the receiver property is enabled.
   - AS_H1_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output buffer is 
                defined and the receiver property is enabled.
   - AS_H1_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the receiver 
                property is enabled.
   - AS_H1_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "Cpu"       (component MK64FN1M0LQ12)

===================================================================================
