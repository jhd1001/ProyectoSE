/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : WAIT_E1.h
**     Project     : Proyecto
**     Processor   : MK64FN1M0VLQ12
**     Component   : Wait
**     Version     : Component 01.082, Driver 01.00, CPU db: 3.00.000
**     Repository  : My Components
**     Compiler    : GNU C Compiler
**     Date/Time   : 2019-03-24, 07:47, # CodeGen: 30
**     Abstract    :
**          Implements busy waiting routines.
**     Settings    :
**          Component name                                 : WAIT_E1
**          SDK                                            : MCUC_H1
**          Use Cycle Counter                              : Disabled
**          Manual Clock Values                            : Disabled
**          Delay100usFunction                             : Delay100US
**          RTOS                                           : Disabled
**          Watchdog                                       : Disabled
**     Contents    :
**         Wait10Cycles   - void WAIT_E1_Wait10Cycles(void);
**         Wait100Cycles  - void WAIT_E1_Wait100Cycles(void);
**         WaitCycles     - void WAIT_E1_WaitCycles(uint16_t cycles);
**         WaitLongCycles - void WAIT_E1_WaitLongCycles(uint32_t cycles);
**         Waitms         - void WAIT_E1_Waitms(uint16_t ms);
**         Waitus         - void WAIT_E1_Waitus(uint16_t us);
**         Waitns         - void WAIT_E1_Waitns(uint16_t ns);
**         WaitOSms       - void WAIT_E1_WaitOSms(void);
**         Init           - void WAIT_E1_Init(void);
**         DeInit         - void WAIT_E1_DeInit(void);
**
**     * Copyright (c) 2013-2017, Erich Styger
**      * Web:         https://mcuoneclipse.com
**      * SourceForge: https://sourceforge.net/projects/mcuoneclipse
**      * Git:         https://github.com/ErichStyger/McuOnEclipse_PEx
**      * All rights reserved.
**      *
**      * Redistribution and use in source and binary forms, with or without modification,
**      * are permitted provided that the following conditions are met:
**      *
**      * - Redistributions of source code must retain the above copyright notice, this list
**      *   of conditions and the following disclaimer.
**      *
**      * - Redistributions in binary form must reproduce the above copyright notice, this
**      *   list of conditions and the following disclaimer in the documentation and/or
**      *   other materials provided with the distribution.
**      *
**      * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**      * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**      * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**      * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**      * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**      * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**      * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**      * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**      * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**      * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
** ###################################################################*/
/*!
** @file WAIT_E1.h
** @version 01.00
** @brief
**          Implements busy waiting routines.
*/         
/*!
**  @addtogroup WAIT_E1_module WAIT_E1 module documentation
**  @{
*/         

#ifndef __WAIT_E1_H
#define __WAIT_E1_H

/* MODULE WAIT_E1. */
#include "MCUC_H1.h" /* SDK and API used */
#include "WAIT_E1config.h" /* configuration */

/* other includes needed */
#if WAIT_E1_CONFIG_USE_RTOS_WAIT
  /* include RTOS header files */
  #include "McuRTOS.h"
  #include "FreeRTOS.h" /* for vTaskDelay() */
  #include "task.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif


#if MCUC_H1_CONFIG_SDK_VERSION_USED == MCUC_H1_CONFIG_SDK_PROCESSOR_EXPERT
  #define WAIT_E1_INSTR_CLOCK_HZ       CPU_CORE_CLK_HZ /* for Kinetis, use core clock as base for instruction execution */
#else
  extern uint32_t SystemCoreClock; /* clock frequency variable defined system_<device>.h of the SDK */
  #define WAIT_E1_INSTR_CLOCK_HZ       SystemCoreClock  /* core clock frequency in Hz */
#endif
#define WAIT_E1_NofCyclesMs(ms, hz)  ((ms)*((hz)/1000)) /* calculates the needed cycles based on bus clock frequency */
#define WAIT_E1_NofCyclesUs(us, hz)  ((us)*(((hz)/1000)/1000)) /* calculates the needed cycles based on bus clock frequency */
#define WAIT_E1_NofCyclesNs(ns, hz)  (((ns)*(((hz)/1000)/1000))/1000) /* calculates the needed cycles based on bus clock frequency */

#define WAIT_E1_WAIT_C(cycles) \
     ( (cycles)<=10 ? \
          WAIT_E1_Wait10Cycles() \
        : WAIT_E1_WaitCycles((uint16_t)cycles) \
      )                                      /*!< wait for some cycles */


void WAIT_E1_Wait10Cycles(void);
/*
** ===================================================================
**     Method      :  WAIT_E1_Wait10Cycles (component Wait)
**     Description :
**         Wait for 10 CPU cycles.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void WAIT_E1_Wait100Cycles(void);
/*
** ===================================================================
**     Method      :  WAIT_E1_Wait100Cycles (component Wait)
**     Description :
**         Wait for 100 CPU cycles.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void WAIT_E1_WaitCycles(uint16_t cycles);
/*
** ===================================================================
**     Method      :  WAIT_E1_WaitCycles (component Wait)
**     Description :
**         Wait for a specified number of CPU cycles (16bit data type).
**     Parameters  :
**         NAME            - DESCRIPTION
**         cycles          - The number of cycles to wait.
**     Returns     : Nothing
** ===================================================================
*/

void WAIT_E1_Waitms(uint16_t ms);
/*
** ===================================================================
**     Method      :  WAIT_E1_Waitms (component Wait)
**     Description :
**         Wait for a specified time in milliseconds.
**     Parameters  :
**         NAME            - DESCRIPTION
**         ms              - How many milliseconds the function has to
**                           wait
**     Returns     : Nothing
** ===================================================================
*/

/* we are having a static clock configuration: implement as macro/inlined version */
#define WAIT_E1_Waitus(us)  \
        /*lint -save -e(505,506,522) Constant value Boolean, Redundant left argument to comma. */\
       (  ((WAIT_E1_NofCyclesUs((us),WAIT_E1_INSTR_CLOCK_HZ)==0)||(us)==0) ? \
          (void)0 : \
          ( ((us)/1000)==0 ? (void)0 : WAIT_E1_Waitms((uint16_t)((us)/1000))) \
          , (WAIT_E1_NofCyclesUs(((us)%1000), WAIT_E1_INSTR_CLOCK_HZ)==0) ? (void)0 : \
            WAIT_E1_WAIT_C(WAIT_E1_NofCyclesUs(((us)%1000), WAIT_E1_INSTR_CLOCK_HZ)) \
       /*lint -restore */\
       )
/*
** ===================================================================
**     Method      :  WAIT_E1_Waitus (component Wait)
**     Description :
**         Wait for a specified time in microseconds.
**     Parameters  :
**         NAME            - DESCRIPTION
**         us              - How many microseconds the function has to
**                           wait
**     Returns     : Nothing
** ===================================================================
*/

/* we are having a static clock configuration: implement as macro/inlined version */
#define WAIT_E1_Waitns(ns)  \
        /*lint -save -e(505,506,522) Constant value Boolean, Redundant left argument to comma. */\
       (  ((WAIT_E1_NofCyclesNs((ns), WAIT_E1_INSTR_CLOCK_HZ)==0)||(ns)==0) ? \
          (void)0 : \
          WAIT_E1_Waitus((ns)/1000) \
          , (WAIT_E1_NofCyclesNs((ns)%1000, WAIT_E1_INSTR_CLOCK_HZ)==0) ? \
              (void)0 : \
              WAIT_E1_WAIT_C(WAIT_E1_NofCyclesNs(((ns)%1000), WAIT_E1_INSTR_CLOCK_HZ)) \
       /*lint -restore */\
       )
/*
** ===================================================================
**     Method      :  WAIT_E1_Waitns (component Wait)
**     Description :
**         Wait for a specified time in nano seconds.
**     Parameters  :
**         NAME            - DESCRIPTION
**         ns              - How many ns the function has to wait
**     Returns     : Nothing
** ===================================================================
*/

#if WAIT_E1_CONFIG_USE_RTOS_WAIT
  #define WAIT_E1_WaitOSms(ms) vTaskDelay(pdMS_TO_TICKS(ms)) /* use FreeRTOS API */
#else
  #define WAIT_E1_WaitOSms(ms)  WAIT_E1_Waitms(ms) /* use normal wait */
#endif
/*
** ===================================================================
**     Method      :  WAIT_E1_WaitOSms (component Wait)
**     Description :
**         If an RTOS is enabled, this routine will use a non-blocking
**         wait method. Otherwise it will do a busy/blocking wait.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void WAIT_E1_WaitLongCycles(uint32_t cycles);
/*
** ===================================================================
**     Method      :  WAIT_E1_WaitLongCycles (component Wait)
**     Description :
**         Wait for a specified number of CPU cycles (32bit data type).
**     Parameters  :
**         NAME            - DESCRIPTION
**         cycles          - The number of cycles to wait.
**     Returns     : Nothing
** ===================================================================
*/

void WAIT_E1_Init(void);
/*
** ===================================================================
**     Method      :  WAIT_E1_Init (component Wait)
**     Description :
**         Driver initialization routine.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void WAIT_E1_DeInit(void);
/*
** ===================================================================
**     Method      :  WAIT_E1_DeInit (component Wait)
**     Description :
**         Driver de-initialization routine
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

/* END WAIT_E1. */

#ifdef __cplusplus
}  /* extern "C" */
#endif

#endif
/* ifndef __WAIT_E1_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.5 [05.21]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
